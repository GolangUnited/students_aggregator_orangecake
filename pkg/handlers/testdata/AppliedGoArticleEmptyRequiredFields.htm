<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us">
<head>
</head>

<body class="appliedgo-light">
<main role="main" class="main article-list">

	<article class="article article-type-post">
		<div class="article-inner">
			<header class="article-header">
				<div class="article-meta">
					<div class="article-date">
						<time datetime="2022-01-28 00:00:00 &#43;0000 UTC" >Jan 28, 2022</time>
					</div>
					9 minute read

				</div>
			</header>

			<div class="article-entry">
				<p>
				<p><div class="gotohugo ">
				<div class="summary doc "></p>
					<p>If you need to develop an AWS Lambda function in Go, take a look at Mantil, a dev kit with staging and database connection included.</p>
					<p></div> <!--summary doc--></p>
				</p>
			</div>
			</div>
		</div>
	</article>

	<article class="article article-type-post">
		<div class="article-inner">


			<header class="article-header">
				<a href="https://appliedgo.net/auxin/">
				</a>
				<div class="article-meta">
					<div class="article-date">
						<time datetime="2022-08-20 00:00:00 &#43;0000 UTC" >Aug 20, 2022</time>
					</div>
					12 minute read

				</div>
			</header>

			<div class="article-entry">
				<p>
				<p><div class="gotohugo ">
				<div class="summary doc "></p>
					<p>Ok, so your radio lacks AirPlay support but has an auxiliary input and can be remote-controlled via the Frontier Silicon API. Fetch a Raspberry Pi, put Shairport-sync and Raspotify on it, plug it into the AUX port, and glue everything together with some Go code. Et voil√† - home automation in the small.</p>
					<p></div> <!--summary doc--></p>
				</p>
			</div>
			</div>
		</div>
	</article>

</main>
</body></html>
